/*
 * @file          : database.cpp
 * @project       : database
 * @author        : Jing Mai <jingmai@pku.edu.cn>
 * @created date  : June 29 2023, 22:33:32, Thursday
 * @brief         :
 * -----
 * Last Modified: July 07 2023, 15:37:31, Friday
 * Modified By: Jing Mai <jingmai@pku.edu.cn>
 * -----
 * @history :
 * ====================================================================================
 * Date         	By     	(version)	Comments
 * -------------	-------	---------	--------------------------------------------------
 * ====================================================================================
 * Copyright (c) 2020 - 2023 All Right Reserved, PKU-IDEA Group
 * -----
 * This header is generated by VSCode extension psi-header.
 */

#include "database/database.h"

#include <gtest/gtest.h>

#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

extern std::string test_dir;

OPENPARF_BEGIN_NAMESPACE

namespace unitest {

/// GTest class for bookshelf parser testing
class DatabaseTest : public ::testing::Test {
 public:
  void testSample1() {
    openparf::database::Database db(0);
    db.readBookshelf(test_dir + "/" + "../../benchmarks/sample1/design.aux");

    // std::cout << db.design() << std::endl;
    // std::cout << db << std::endl;

    auto const &design   = db.design();
    auto const &layout   = db.layout();
    auto const &site_map = layout.siteMap();
    for (auto const &site : site_map) {
      ASSERT_EQ(&site, &site_map.at(site.siteMapId().x(), site.siteMapId().y()).value());
      if (layout.siteType(site).name() == "SLICE" || layout.siteType(site).name() == "SLICEL" ||
              layout.siteType(site).name() == "SLICEM") {
        ASSERT_EQ(site.bbox().width(), 1);
        ASSERT_EQ(site.bbox().height(), 1);
      } else if (layout.siteType(site).name() == "DSP") {
        ASSERT_EQ(site.bbox().width(), 1);
        if ((site.siteMapId().y() % 5) == 0) {
          ASSERT_EQ(site.bbox().height(), 2);
        } else {
          ASSERT_EQ(site.bbox().height(), 3);
        }
      } else if (layout.siteType(site).name() == "BRAM") {
        ASSERT_EQ(site.bbox().width(), 1);
        ASSERT_EQ(site.bbox().height(), 5);
      } else if (layout.siteType(site).name() == "IO") {
        ASSERT_EQ(site.bbox().width(), 1);
        auto xs = {0, 67, 104, 167};
        if (std::any_of(xs.begin(), xs.end(), [&](int x) { return x == site.siteMapId().x(); })) {
          ASSERT_EQ(site.bbox().height(), 60);
        } else {
          ASSERT_EQ(site.bbox().height(), 30);
        }
      } else {
        ASSERT_EQ(layout.siteType(site).name(), "SLICE");
      }
    }

    auto const &site_type_map = layout.siteTypeMap();
    auto const &resource_map  = layout.resourceMap();
    ASSERT_EQ(site_type_map.siteType("SLICE")->resourceCapacity(resource_map.resourceId("LUT")), 16);
    ASSERT_EQ(site_type_map.siteType("SLICE")->resourceCapacity(resource_map.resourceId("FF")), 16);
    ASSERT_EQ(site_type_map.siteType("SLICE")->resourceCapacity(resource_map.resourceId("CARRY8")), 1);
    ASSERT_EQ(site_type_map.siteType("DSP")->resourceCapacity(resource_map.resourceId("DSP48E2")), 1);
    ASSERT_EQ(site_type_map.siteType("BRAM")->resourceCapacity(resource_map.resourceId("RAMB36E2")), 1);
    ASSERT_EQ(site_type_map.siteType("IO")->resourceCapacity(resource_map.resourceId("IO")), 64);

    ASSERT_EQ(resource_map.resourceId("LUT"), resource_map.modelResourceIds(design.modelId("LUT1"))[0]);
    ASSERT_EQ(resource_map.resourceId("LUT"), resource_map.modelResourceIds(design.modelId("LUT2"))[0]);
    ASSERT_EQ(resource_map.resourceId("LUT"), resource_map.modelResourceIds(design.modelId("LUT3"))[0]);
    ASSERT_EQ(resource_map.resourceId("LUT"), resource_map.modelResourceIds(design.modelId("LUT4"))[0]);
    ASSERT_EQ(resource_map.resourceId("LUT"), resource_map.modelResourceIds(design.modelId("LUT5"))[0]);
    ASSERT_EQ(resource_map.resourceId("LUT"), resource_map.modelResourceIds(design.modelId("LUT6"))[0]);
    ASSERT_EQ(resource_map.resourceId("FF"), resource_map.modelResourceIds(design.modelId("FDRE"))[0]);
    ASSERT_EQ(resource_map.resourceId("CARRY8"), resource_map.modelResourceIds(design.modelId("CARRY8"))[0]);
    ASSERT_EQ(resource_map.resourceId("DSP48E2"), resource_map.modelResourceIds(design.modelId("DSP48E2"))[0]);
    ASSERT_EQ(resource_map.resourceId("RAMB36E2"), resource_map.modelResourceIds(design.modelId("RAMB36E2"))[0]);
    ASSERT_EQ(resource_map.resourceId("IO"), resource_map.modelResourceIds(design.modelId("IBUF"))[0]);
    ASSERT_EQ(resource_map.resourceId("IO"), resource_map.modelResourceIds(design.modelId("OBUF"))[0]);
    ASSERT_EQ(resource_map.resourceId("IO"), resource_map.modelResourceIds(design.modelId("BUFGCE"))[0]);
  }
};

class EHBookshelfTest : public ::testing::Test {
 public:
  void testSample1() {
    openparf::database::Database db(0);
    db.readEHBookshelf(test_dir + "/" + "../../benchmarks/ehbookshelf/sample1");

    // std::cout << db.design() << std::endl;
    // std::cout << db << std::endl;

    auto const &design    = db.design();
    auto const &layout    = db.layout();
    auto const &site_map  = layout.siteMap();

    for (auto const &site : site_map) {
      ASSERT_EQ(&site, &site_map.at(site.siteMapId().x(), site.siteMapId().y()).value());
      if (layout.siteType(site).name() == "SLICE" || layout.siteType(site).name() == "SLICEL" ||
              layout.siteType(site).name() == "SLICEM") {
        ASSERT_EQ(site.bbox().width(), 1);
        if (site.bbox().height() != 1) {
          std::cout << site.bbox() << std::endl;
        }
        ASSERT_EQ(site.bbox().height(), 1);
      } else if (layout.siteType(site).name() == "DSP") {
        ASSERT_EQ(site.bbox().width(), 1);
        if ((site.siteMapId().y() % 5) == 0) {
          ASSERT_EQ(site.bbox().height(), 2);
        } else {
          ASSERT_EQ(site.bbox().height(), 3);
        }
      } else if (layout.siteType(site).name() == "BRAM") {
        ASSERT_EQ(site.bbox().width(), 1);
        ASSERT_EQ(site.bbox().height(), 5);
      } else if (layout.siteType(site).name() == "URAM") {
        ASSERT_EQ(site.bbox().width(), 1);
        ASSERT_EQ(site.bbox().height(), 15);
      } else if (layout.siteType(site).name() == "IO") {
        ASSERT_EQ(site.bbox().width(), 1);
        ASSERT_EQ(site.bbox().height(), 30);
      } else {
        ASSERT_EQ(layout.siteType(site).name(), "SLICE");
      }
    }

    auto const &site_type_map = layout.siteTypeMap();
    auto const &resource_map  = layout.resourceMap();
    ASSERT_EQ(site_type_map.siteType("SLICE")->resourceCapacity(resource_map.resourceId("LUT")), 16);
    ASSERT_EQ(site_type_map.siteType("SLICE")->resourceCapacity(resource_map.resourceId("FF")), 16);
    ASSERT_EQ(site_type_map.siteType("SLICE")->resourceCapacity(resource_map.resourceId("CARRY8")), 1);
    ASSERT_EQ(site_type_map.siteType("DSP")->resourceCapacity(resource_map.resourceId("DSP48E2")), 1);
    ASSERT_EQ(site_type_map.siteType("BRAM")->resourceCapacity(resource_map.resourceId("RAMB36E2")), 1);
    ASSERT_EQ(site_type_map.siteType("URAM")->resourceCapacity(resource_map.resourceId("URAM288")), 1);
    ASSERT_EQ(site_type_map.siteType("IO")->resourceCapacity(resource_map.resourceId("IO")), 64);

    ASSERT_EQ(resource_map.resourceId("LUT"), resource_map.modelResourceIds(design.modelId("LUT1"))[0]);
    ASSERT_EQ(resource_map.resourceId("LUT"), resource_map.modelResourceIds(design.modelId("LUT2"))[0]);
    ASSERT_EQ(resource_map.resourceId("LUT"), resource_map.modelResourceIds(design.modelId("LUT3"))[0]);
    ASSERT_EQ(resource_map.resourceId("LUT"), resource_map.modelResourceIds(design.modelId("LUT4"))[0]);
    ASSERT_EQ(resource_map.resourceId("LUT"), resource_map.modelResourceIds(design.modelId("LUT5"))[0]);
    ASSERT_EQ(resource_map.resourceId("LUT"), resource_map.modelResourceIds(design.modelId("LUT6"))[0]);
    ASSERT_EQ(resource_map.resourceId("FF"), resource_map.modelResourceIds(design.modelId("FDRE"))[0]);
    ASSERT_EQ(resource_map.resourceId("CARRY8"), resource_map.modelResourceIds(design.modelId("CARRY8"))[0]);
    ASSERT_EQ(resource_map.resourceId("DSP48E2"), resource_map.modelResourceIds(design.modelId("DSP48E2"))[0]);
    ASSERT_EQ(resource_map.resourceId("URAM288"), resource_map.modelResourceIds(design.modelId("URAM288"))[0]);
    ASSERT_EQ(resource_map.resourceId("IO"), resource_map.modelResourceIds(design.modelId("BUFGCE"))[0]);
    ASSERT_EQ(resource_map.resourceId("IO"), resource_map.modelResourceIds(design.modelId("IBUF"))[0]);
    ASSERT_EQ(resource_map.resourceId("IO"), resource_map.modelResourceIds(design.modelId("OBUF"))[0]);
    ASSERT_EQ(resource_map.resourceId("IO"), resource_map.modelResourceIds(design.modelId("BUFGCE"))[0]);

    // shape model
    auto &shape_constraint = db.shapeConstraint();
    ASSERT_EQ(shape_constraint.shapeModels().size(), 11);

    ASSERT_EQ(shape_constraint.shapeModel(0).name(), "BRAM_CASCADE_2");
    ASSERT_EQ(shape_constraint.shapeModel(0).shapeElements().size(), 2);
    ASSERT_EQ(shape_constraint.shapeModel(0).shapeElements()[0].model_id(), design.modelId("RAMB36E2"));
    ASSERT_EQ(shape_constraint.shapeModel(0).shapeElements()[1].model_id(), design.modelId("RAMB36E2"));
    ASSERT_EQ(shape_constraint.shapeModel(0).shapeElements()[0].offset().x(), 0);
    ASSERT_EQ(shape_constraint.shapeModel(0).shapeElements()[0].offset().y(), 0);
    ASSERT_EQ(shape_constraint.shapeModel(0).shapeElements()[1].offset().x(), 0);
    ASSERT_EQ(shape_constraint.shapeModel(0).shapeElements()[1].offset().y(), 1);

    ASSERT_EQ(shape_constraint.shapeModel(10).name(), "URAM_CASCADE_8x2");
    ASSERT_EQ(shape_constraint.shapeModel(10).shapeElements().size(), 16);
    ASSERT_EQ(shape_constraint.shapeModel(10).shapeElements()[0].model_id(), design.modelId("URAM288"));
    ASSERT_EQ(shape_constraint.shapeModel(10).shapeElements()[1].model_id(), design.modelId("URAM288"));
    ASSERT_EQ(shape_constraint.shapeModel(10).shapeElements()[0].offset().x(), 0);
    ASSERT_EQ(shape_constraint.shapeModel(10).shapeElements()[0].offset().y(), 0);
    ASSERT_EQ(shape_constraint.shapeModel(10).shapeElements()[1].offset().x(), 0);
    ASSERT_EQ(shape_constraint.shapeModel(10).shapeElements()[1].offset().y(), 1);
    ASSERT_EQ(shape_constraint.shapeModel(10).shapeElements()[2].offset().x(), 0);
    ASSERT_EQ(shape_constraint.shapeModel(10).shapeElements()[2].offset().y(), 2);
    ASSERT_EQ(shape_constraint.shapeModel(10).shapeElements()[8].offset().x(), 1);
    ASSERT_EQ(shape_constraint.shapeModel(10).shapeElements()[8].offset().y(), 0);
    ASSERT_EQ(shape_constraint.shapeModel(10).shapeElements()[9].offset().x(), 1);
    ASSERT_EQ(shape_constraint.shapeModel(10).shapeElements()[9].offset().y(), 1);

    // shape
    ASSERT_EQ(shape_constraint.shapes().size(), 10);
    ASSERT_EQ(shape_constraint.shapes()[0].name(), "BRAM_CASCADE_2");
    ASSERT_EQ(shape_constraint.shapes()[0].shapeModelId(), shape_constraint.shapeModel(0).id());
    ASSERT_EQ(shape_constraint.shapes()[0].instIds().size(), 2);
  }
};


TEST_F(DatabaseTest, Sample1) {
  testSample1();
}

TEST_F(EHBookshelfTest, Sample1) {
  testSample1();
}

}   // namespace unitest

OPENPARF_END_NAMESPACE
