/*
 * @file          : shape_alignment_cuda_kernel.cu
 * @project       : src
 * @author        : Jing Mai <jingmai@pku.edu.cn>
 * @created date  : July 17 2023, 14:08:40, Monday
 * @brief         :
 * -----
 * Last Modified: July 17 2023, 14:28:59, Monday
 * Modified By: Jing Mai <jingmai@pku.edu.cn>
 * -----
 * @history :
 * ====================================================================================
 * Date         	By     	(version)	Comments
 * -------------	-------	---------	--------------------------------------------------
 * ====================================================================================
 * Copyright (c) 2020 - 2023 All Right Reserved, PKU-IDEA Group
 * -----
 * This header is generated by VSCode extension psi-header.
 */

#include <cuda_runtime.h>

#include "util/util.cuh"

OPENPARF_BEGIN_NAMESPACE

namespace shape_alignment {

template<class T>
__global__ void shapeAlignmentKernel(T *pos, T *offset, int32_t *index_data, int32_t *index_start, int32_t num_shapes) {
  int32_t i = threadIdx.x + blockDim.x * blockIdx.x;
  if (i >= num_shapes) return;
  int32_t st            = index_start[i];
  int32_t en            = index_start[i + 1];
  T       inv_num_insts = 1.0 / (en - st);
  T       xx_sum        = 0;
  T       yy_sum        = 0;
  T       grav_xx, grav_yy;

  for (int j = st; j < en; j++) {
    int32_t inst_id = index_data[j];
    xx_sum += pos[inst_id << 1];
    yy_sum += pos[inst_id << 1 | 1];
  }
  grav_xx = xx_sum * inv_num_insts;
  grav_yy = yy_sum * inv_num_insts;
  for (int j = st; j < en; j++) {
    int32_t inst_id       = index_data[j];
    pos[inst_id << 1]     = grav_xx + offset[j << 1];
    pos[inst_id << 1 | 1] = grav_yy + offset[j << 1 | 1];
  }
}

template<class T>
void shapeAlignmentKernelLauncher(T *pos, T *offset, int32_t *index_data, int32_t *index_start, int32_t num_shapes) {
  if (num_shapes) {
    int32_t thread_count = 256;
    int32_t block_count  = ceilDiv(num_shapes, thread_count);
    shapeAlignmentKernel<<<(uint32_t) block_count, {(uint32_t) thread_count, 1u, 1u}>>>(pos, offset, index_data,
            index_start, num_shapes);
  }
}

#define REGISTER_KERNEL_LAUNCHER(T)                                                                                    \
  template void shapeAlignmentKernelLauncher<T>(T * pos, T * offset, int32_t * index_data, int32_t * index_start,      \
          int32_t num_shapes);

REGISTER_KERNEL_LAUNCHER(float)
REGISTER_KERNEL_LAUNCHER(double)

#undef REGISTER_KERNEL_LAUNCHER

}   // namespace shape_alignment

OPENPARF_END_NAMESPACE
