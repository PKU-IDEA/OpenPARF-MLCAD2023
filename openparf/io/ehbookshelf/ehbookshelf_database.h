/*
 * @file          : ehbookshelf_database.h
 * @project       : ehbookshelf
 * @author        : Jing Mai <jingmai@pku.edu.cn>
 * @created date  : June 29 2023, 22:59:33, Thursday
 * @brief         :
 * -----
 * Last Modified: July 14 2023, 15:36:51, Friday
 * Modified By: Jing Mai <jingmai@pku.edu.cn>
 * -----
 * @history :
 * ====================================================================================
 * Date         	By     	(version)	Comments
 * -------------	-------	---------	--------------------------------------------------
 * ====================================================================================
 * Copyright (c) 2020 - 2023 All Right Reserved, PKU-IDEA Group
 * -----
 * This header is generated by VSCode extension psi-header.
 */
#ifndef OPENPARF_IO_EHBOOKSHELF_EHBOOKSHELF_DATABASE_H_
#define OPENPARF_IO_EHBOOKSHELF_EHBOOKSHELF_DATABASE_H_


#include <array>
#include <cassert>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>

namespace ehbookshelfparser {

class EHBookshelfDatabase {
 public:
  /* parsing lib file */
  virtual void addCellCbk(const std::string &str)                                                              = 0;
  virtual void addCellInputPinCbk(const std::string &str)                                                      = 0;
  virtual void addCellOutputPinCbk(const std::string &str)                                                     = 0;
  virtual void addCellClockPinCbk(const std::string &str)                                                      = 0;
  virtual void addCellCtrlPinCbk(const std::string &str)                                                       = 0;
  virtual void addCellCtrlSRPinCbk(const std::string &str)                                                     = 0;
  virtual void addCellCtrlCEPinCbk(const std::string &str)                                                     = 0;
  virtual void addCellInputCasPinCbk(const std::string &str)                                                   = 0;
  virtual void addCellOutputCasPinCbk(const std::string &str)                                                  = 0;
  virtual void addCellParameterCbk(const std::string &str)                                                     = 0;

  /* parsing scl file */
  virtual void setSiteResources(std::string const             &site_type,
          std::vector<std::pair<std::string, unsigned>> const &site_resources)                                 = 0;
  virtual void addResourceTypeCbk(std::string const &resource_type, std::vector<std::string> const &cell_list) = 0;
  virtual void endResourceTypeBlockCbk()                                                                       = 0;
  virtual void initSiteMapCbk(unsigned w, unsigned h)                                                          = 0;
  virtual void endSiteMapCbk()                                                                                 = 0;
  virtual void setSiteMapEntryCbk(unsigned x, unsigned y, std::string const &site_type)                        = 0;
  virtual void initClockRegionsCbk(unsigned width, unsigned height)                                            = 0;
  virtual void addClockRegionCbk(const std::string &name,
          unsigned                                  xlo,
          unsigned                                  ylo,
          unsigned                                  xhi,
          unsigned                                  yhi,
          unsigned                                  ymid,
          unsigned                                  hcxmin)                                                                                     = 0;

  /* parsing nodes file */
  virtual void addNodeCbk(const std::string &node_name, const std::string &cell_name)                          = 0;

  /* parsing pl file */
  virtual void setFixedNodeCbk(const std::string &node_name, unsigned x, unsigned y, unsigned z)               = 0;

  /* parsing nets file */
  virtual void addNetCbk(const std::string &, unsigned degree)                                                 = 0;
  virtual void addPinCbk(const std::string &node_name, const std::string &cell_pin_name)                       = 0;
  virtual void endNetCbk()                                                                                     = 0;

  /* parsing cascade shape file */
  virtual void addCascadeShapeCbk(const std::string   &shape_model_name,
          const std::pair<int32_t, int32_t>            shape_model_size,
          const std::vector<std::vector<std::string>> &element_list)                                           = 0;

  /* parsing cascade shape instance file */
  virtual void addCascadeShapeInstanceCbk(const std::string &shape_model_name,
          const std::string                                  shape_instance_name,
          const std::vector<std::string>                     shape_instance_list)                                                  = 0;

  /* parsing region file */
  struct Box {
    std::string box_type;
    int32_t     xlo;
    int32_t     ylo;
    int32_t     xhi;
    int32_t     yhi;
  };
  virtual void addRegionConstraintCbk(std::string const &region_name,
          int32_t                                        num_boxes,
          const std::vector<Box>                        &boxes)                                                         = 0;
  virtual void addRegionMappingCbk(const std::string &cell_name, const std::string &region_name) = 0;

  /* parsingi macros file */
  virtual void addMacroInstCbk(std::string const &macro_inst_name)                               = 0;
};

}   // namespace ehbookshelfparser

#endif   // OPENPARF_IO_EHBOOKSHELF_EHBOOKSHELF_DATABASE_H_
