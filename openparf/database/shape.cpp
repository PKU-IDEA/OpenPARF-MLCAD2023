/*
 * @file          : shape.cpp
 * @project       : database
 * @author        : Jing Mai <jingmai@pku.edu.cn>
 * @created date  : June 28 2023, 15:51:51, Wednesday
 * @brief         :
 * -----
 * Last Modified: July 03 2023, 22:47:07, Monday
 * Modified By: Jing Mai <jingmai@pku.edu.cn>
 * -----
 * @history :
 * ====================================================================================
 * Date         	By     	(version)	Comments
 * -------------	-------	---------	--------------------------------------------------
 * ====================================================================================
 * Copyright (c) 2020 - 2023 All Right Reserved, PKU-IDEA Group
 * -----
 * This header is generated by VSCode extension psi-header.
 */

#include "database/shape.h"

OPENPARF_BEGIN_NAMESPACE

namespace database {

std::ostream &operator<<(std::ostream &os, ShapeElement const &rhs) {
  os << className<decltype(rhs)>() << "("
     << "id_ : " << rhs.id_ << ", mode_id_ : " << rhs.model_id_ << ", offset_ : " << rhs.offset_ << ")";
  return os;
}

void ShapeModel::copy(ShapeModel const &rhs) {
  this->BaseType::copy(rhs);
  type_     = rhs.type_;
  name_     = rhs.name_;
  elements_ = rhs.elements_;
}

void ShapeModel::move(ShapeModel &&rhs) {
  this->BaseType::move(std::move(rhs));
  type_     = std::move(rhs.type_);
  name_     = std::move(rhs.name_);
  elements_ = std::move(rhs.elements_);
}

ShapeElement &ShapeModel::addShapeElement(IndexType model_id, ShapeModel::PointType const &offset) {
  elements_.emplace_back();
  auto &element = elements_.back();
  element.setId(numShapeElements() - 1);
  element.setModelId(model_id);
  element.setOffset(offset);
  return element;
}

ShapeModel::IndexType ShapeModel::memory() const {
  return this->BaseType::memory() + sizeof(type_) + sizeof(name_) + sizeof(elements_) +
         elements_.capacity() * sizeof(decltype(elements_)::value_type);
}

std::ostream &operator<<(std::ostream &os, ShapeModel const &rhs) {
  os << className<decltype(rhs)>() << "("
     << "id_ : " << rhs.id_ << ", type_ : " << rhs.type_ << ", name_ : " << rhs.name_;
  os << ", elements_ : " << rhs.elements_ << ")";
  return os;
}

void Shape::copy(Shape const &rhs) {
  this->BaseType::copy(rhs);
  shape_model_id_ = rhs.shape_model_id_;
  name_           = rhs.name_;
  inst_ids_       = rhs.inst_ids_;
}

void Shape::move(Shape &&rhs) {
  this->BaseType::move(std::move(rhs));
  shape_model_id_ = std::move(rhs.shape_model_id_);
  name_           = std::move(rhs.name_);
  inst_ids_       = std::move(rhs.inst_ids_);
}

Shape::IndexType Shape::memory() const {
  return this->BaseType::memory() + sizeof(shape_model_id_) + sizeof(name_) + sizeof(inst_ids_) +
         inst_ids_.capacity() * sizeof(decltype(inst_ids_)::value_type);
}

std::ostream &operator<<(std::ostream &os, Shape const &rhs) {
  os << className<decltype(rhs)>() << "("
     << "id_ : " << rhs.id_ << ", shape_model_id_ : " << rhs.shape_model_id_ << ", name_ : " << rhs.name_;
  os << ", inst_ids_ : " << rhs.inst_ids_ << ")";
  return os;
}

ShapeModel &ShapeConstraint::tryAddShapeModel(std::string const &name) {
  return shape_models_.tryAdd(name);
}

Shape &ShapeConstraint::tryAddShape(std::string const &name) {
  return shapes_.tryAdd(name);
}

void ShapeConstraint::copy(ShapeConstraint const &rhs) {
  this->BaseType::copy(rhs);
  shape_models_ = rhs.shape_models_;
  shapes_       = rhs.shapes_;
}

void ShapeConstraint::move(ShapeConstraint &&rhs) {
  this->BaseType::move(std::move(rhs));
  shape_models_ = std::move(rhs.shape_models_);
  shapes_       = std::move(rhs.shapes_);
}

ShapeConstraint::IndexType ShapeConstraint::memory() const {
  return this->BaseType::memory() + shape_models_.memory() + shapes_.memory();
}

std::ostream &operator<<(std::ostream &os, ShapeConstraint const &rhs) {
  os << className<decltype(rhs)>() << "("
     << "id_ : " << rhs.id_ << ", shape_models_ : " << rhs.shape_models_ << ", shapes_ : " << rhs.shapes_ << ")";
  return os;
}

}   // namespace database

OPENPARF_END_NAMESPACE
